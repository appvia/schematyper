// Code generated by schematyper; DO NOT EDIT.

package schemas

type MetaDependency interface{}

type MetaEnumItem interface{}

type MetaExample interface{}

type MetaNonNegativeInteger int

type MetaNonNegativeIntegerDefault0 interface{}

type MetaNonNegativeIntegerDefault0Embedded1 interface{}

type MetaSchema struct {
	AdditionalItems      interface{}                    `json:"additionalItems,omitempty"`
	AdditionalProperties interface{}                    `json:"additionalProperties,omitempty"`
	AllOf                MetaSchemaArray                `json:"allOf,omitempty"`
	AnyOf                MetaSchemaArray                `json:"anyOf,omitempty"`
	Comment              string                         `json:"$comment,omitempty"`
	Const                interface{}                    `json:"const,omitempty"`
	Contains             *MetaSchema                    `json:"contains,omitempty"`
	ContentEncoding      string                         `json:"contentEncoding,omitempty"`
	ContentMediaType     string                         `json:"contentMediaType,omitempty"`
	Default              interface{}                    `json:"default,omitempty"`
	Definitions          map[string]MetaSchema          `json:"definitions,omitempty"`
	Dependencies         map[string]MetaDependency      `json:"dependencies,omitempty"`
	Description          string                         `json:"description,omitempty"`
	Else                 *MetaSchema                    `json:"else,omitempty"`
	Enum                 []MetaEnumItem                 `json:"enum,omitempty"`
	Examples             []MetaExample                  `json:"examples,omitempty"`
	ExclusiveMaximum     float64                        `json:"exclusiveMaximum,omitempty"`
	ExclusiveMinimum     float64                        `json:"exclusiveMinimum,omitempty"`
	Format               string                         `json:"format,omitempty"`
	Id                   string                         `json:"$id,omitempty"`
	If                   *MetaSchema                    `json:"if,omitempty"`
	Items                interface{}                    `json:"items,omitempty"`
	MaxItems             MetaNonNegativeInteger         `json:"maxItems,omitempty"`
	MaxLength            MetaNonNegativeInteger         `json:"maxLength,omitempty"`
	MaxProperties        MetaNonNegativeInteger         `json:"maxProperties,omitempty"`
	Maximum              float64                        `json:"maximum,omitempty"`
	MinItems             MetaNonNegativeIntegerDefault0 `json:"minItems,omitempty"`
	MinLength            MetaNonNegativeIntegerDefault0 `json:"minLength,omitempty"`
	MinProperties        MetaNonNegativeIntegerDefault0 `json:"minProperties,omitempty"`
	Minimum              float64                        `json:"minimum,omitempty"`
	MultipleOf           float64                        `json:"multipleOf,omitempty"`
	Not                  *MetaSchema                    `json:"not,omitempty"`
	OneOf                MetaSchemaArray                `json:"oneOf,omitempty"`
	Pattern              string                         `json:"pattern,omitempty"`
	PatternProperties    map[string]MetaSchema          `json:"patternProperties,omitempty"`
	Properties           map[string]MetaSchema          `json:"properties,omitempty"`
	PropertyNames        *MetaSchema                    `json:"propertyNames,omitempty"`
	ReadOnly             bool                           `json:"readOnly,omitempty"`
	Ref                  string                         `json:"$ref,omitempty"`
	Required             MetaStringArray                `json:"required,omitempty"`
	Schema               string                         `json:"$schema,omitempty"`
	Then                 *MetaSchema                    `json:"then,omitempty"`
	Title                string                         `json:"title,omitempty"`
	Type                 interface{}                    `json:"type,omitempty"`
	UniqueItems          bool                           `json:"uniqueItems,omitempty"`
	WriteOnly            bool                           `json:"writeOnly,omitempty"`
}

type MetaSchemaArray []MetaSchema

type MetaSimpleTypes interface{}

type MetaStringArray []MetaStringArrayItem

type MetaStringArrayItem string
